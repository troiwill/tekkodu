// Tekkotsu Library
#include "Behaviors/StateMachine.h"
#include "DualCoding/VRmixin.h"

// C++ Library
#include <cctype>
#include <iostream>
#include <queue>
#include <vector>

// ========= Kodu Library ========= //
#include "Kodu/KoduAgent.h"

// General Functions
#include "Kodu/General/GeneralFncs.h"
#include "Kodu/General/GeneralMacros.h"

// Kodu Parsing
#include "Kodu/Parsing/Parser.h"

// Kodu Primitives
#include "Kodu/Primitives/KoduActionMotion.h"
#include "Kodu/Primitives/KoduActionPageSwitch.h"
#include "Kodu/Primitives/KoduActionSay.h"
#include "Kodu/Primitives/KoduConditionAlways.h"
#include "Kodu/Primitives/KoduConditionBump.h"
#include "Kodu/Primitives/KoduConditionSee.h"

#include "Kodu/Keepers/ScoreKeeper.h"
#include "Kodu/Keepers/ObjectKeeper.h"
#include "Kodu/KoduPage.h"
#include "Kodu/KoduRule.h"

$nodeclass KoduGame : VisualRoutinesStateNode {
    
    $provide Kodu::KoduAgent agent;
    $provide unsigned int cycleCount;
    
    $provide std::queue<Kodu::KoduActionScore*> scoreQueue;

    $provide MotionActuator* motionActRef;
    $provide PageSwitchActuator* pageSwitchActRef;
    $provide PlayActuator* playActRef;
    $provide SayActuator* sayActRef;
    $provide ScoreActuator* scoreActRef;
    
    $nodeclass InitializeGame : StateNode : doStart {
        $reference KoduGame::cycleCount;
        
        std::cout << "Initializing Kodu Game.\n";
        cycleCount = 0;
        
        // create world bounds
        std::vector<Point> worldBounds;
        const float maxBoundLength = 2000.0f;   // assumes the world is a square
        const float minX = -500.0f;
        const float maxX = maxBoundLength + minX;
        const float minY = -maxBoundLength / 2.0f;
        const float maxY =  maxBoundLength / 2.0f;
        
        // add the points of the square polygon to the vector
        worldBounds.push_back(Point(minX, maxY, 0, egocentric));
        worldBounds.push_back(Point(maxX, maxY, 0, egocentric));
        worldBounds.push_back(Point(maxX, minY, 0, egocentric));
        worldBounds.push_back(Point(minX, minY, 0, egocentric));
        worldBounds.push_back(worldBounds[0]);  // close the polygon
        
        // create a Shape<PolygonData> object and use it as the world bounds.
        NEW_SHAPE(wBoundPolygon, PolygonData, new PolygonData(worldShS, worldBounds, false));
        DualCoding::VRmixin::pilot->setWorldBounds(wBoundPolygon);

        std::cout << "Initialization complete.\n";
        postStateCompletion();
    }
    
    //! Kodu Code Parser
    $nodeclass KoduParser : StateNode : doStart {
        $reference KoduGame::agent;
        
        // parses and creates Kodu program
        if (Kodu::Parser::parseAndCreateKoduProgram(agent.pages) == false) {
            postStateFailure();
            std::cerr << "Error parsing and creating Kodu program.\n";
            return;
        }

        // TODO (27/JUL/13) find out why this is causing a segmentation fault
        //if (!tempPages.empty())
        //  GeneralFncs::destroyAllPtrsInVector(tempPages);

        std::cout << "Parsing complete.\n";
        postStateCompletion();
    }

    $nodeclass SnapImage : MapBuilderNode(MapBuilderRequest::worldMap) : doStart {
        $reference KoduGame::agent;
        
        // get the colors of the objects the agent should search for on this page
        std::vector<std::string> objectDescrips = agent.getCurrentPage()->getObjectDescriptors();
        const std::size_t kSize = objectDescrips.size();
        // add those colors to the MapBuilderRequest mapreq
        for (std::size_t index = 0; index < kSize; index++) {
            mapreq.addObjectColor(cylinderDataType, objectDescrips[index]);
        }
        mapreq.searchArea = agent.getGazePolygon();
        //mapreq.doScan = true;
        mapreq.pursueShapes = true;
        //mapreq.maxDist = distantRadius * 1.15f;   // would be world bounds
    }

    $nodeclass PointHeadFwd : HeadPointerNode : doStart {
        // look ahead at point {x, y, z}
        getMC()->lookAtPoint(2000.0f, 0, 0);
        getMC()->updateOutputs();
    }

    
    //! Kodu Interpreter
    $nodeclass KoduInterpreter : StateNode {

        //! Enables child rules with the once modifier enabled (who have already ran) to run (again)
        void resetChildRulesWithOnceEnabled(const unsigned int kParentRuleNumer) {
            $reference KoduGame::agent;

            Kodu::KoduPage* page = agent.getCurrentPage();
            Kodu::KoduRule* rule = NULL;
            const int kRuleCount = page->getRuleCount();
            for (int childRule_i = kParentRuleNumer + 1; childRule_i < kRuleCount; childRule_i++) {
                // get rule# i
                rule = page->getRule(childRule_i);
                // check if this rule's parent is kParentRuleNumber
                // if it is, set actionCanRun flag to true
                // else break--this rule has no more child actions
                if (rule->getParentNumber() == kParentRuleNumer)
                    rule->action->setActionCanRun(true);
                else
                    break;
            }
            page = NULL;
            rule = NULL;
        }

        virtual void doStart() {
            $reference KoduGame::cycleCount;
            $reference KoduGame::agent;
            $reference KoduGame::scoreQueue;
            
            Kodu::KoduPage* cPage;
            Kodu::KoduRule* cRule;
            if ((cPage = agent.getCurrentPage()) == NULL) {
                std::cerr << "!!! A NULL page was found.\n";
                postStateFailure();
                return;
            }

            std::cout << "========== GAME CYCLE #" << cycleCount++
                      << ", PAGE #" << cPage->getPageNumber() << "==========\n";
            
            const int numbOfRules = cPage->getRuleCount();
            if (numbOfRules == 0) {
                std::cout << "Reached an empty page. Stopping interpreter...\n";
                postStateFailure();
                return;
            }

            for (int i = 0; i < numbOfRules; i++) {
                // checks if the rule returned is NULL. 
                if ((cRule = cPage->getRuleInPos(i)) == NULL) {
                    std::cerr << "!!! A NULL rule was found. Tried accessing Page["
                              << (cPage->getPageNumber() - 1) << "], Rule[" << i << "]\n";
                    postStateFailure();
                    return;
                }

                // TODO (05/July/2013) Figure out how to cancel a running pilot request
                if (cRule->condition->evaluate() == true) {
                    // resets the action has already ran flag
                    if (cRule->condLastEvalResult == false) {
                        resetChildRulesWithOnceEnabled(cRule->getRuleNumber());
                    }
                    // states condition evaluated true (no matter if action can execute or not)
                    cRule->setConditionEvalResult(true);
                    // check if this rule has a parent rule and if it's condition evaluated true
                    if (cRule->isIndented()
                        && (cPage->getRule(cRule->getParentNumber())->condLastEvalResult == false))
                    {
                        continue;
                    }
                    // check if the action can run
                    if (cRule->action->canRun()) {
                        // Kodu Action Do Nothing
                        if (Kodu::KoduActionDoNothing::isSameTypeAs(cRule->action)) {
                            std::cout << "Do nothing...\n";
                        }

                        // Kodu Action Motion
                        else if (Kodu::KoduActionMotion::isSameTypeAs(cRule->action)) {
                            Kodu::MotionCommand cmd =
                                dynamic_cast<Kodu::KoduActionMotion*>(cRule->action)->getMotionCommand();
                            if (!agent.isWalking() && !agent.hasMotionCommand() && cmd.isValid()) {
                                agent.currMotionCmd = cmd;
                                std::cout << "Added a motion command...\n";
                            }
                        }

                        // Kodu Action Page Switch
                        else if (Kodu::KoduActionPageSwitch::isSameTypeAs(cRule->action)) {
                            agent.newReqdPage =
                                dynamic_cast<Kodu::KoduActionPageSwitch*>(cRule->action)->getPageNumber();
                            std::cout << "Switching to another page!\n";
                            break;
                        }

                        // Kodu Action Play
                        else if (Kodu::KoduActionPlay::isSameTypeAs(cRule->action)) {
                            std::string soundFile =
                                dynamic_cast<Kodu::KoduActionPlay*>(cRule->action)->getSoundFile();
                            agent.playQueue.push(soundFile);
                            std::cout << "Added the sound file \"" << soundFile << "\".\n";
                        }

                        // Kodu Action Say
                        else if (Kodu::KoduActionSay::isSameTypeAs(cRule->action)) {
                            if (!agent.hasTextToSay()) {
                                agent.stringToSpeak =
                                    dynamic_cast<Kodu::KoduActionSay*>(cRule->action)->getStringToSpeak();
                                std::cout << "Added literal string: \"" << agent.stringToSpeak << "\".\n";
                            }
                        }

                        // Kodu Action Score
                        else if (Kodu::KoduActionScore::isSameTypeAs(cRule->action)) {
                            scoreQueue.push(dynamic_cast<Kodu::KoduActionScore*>(cRule->action));
                            std::cout << "Added a score action type.\n";
                        }

                        // something wrong has happened, but should never happen
                        else {
                            std::cerr << "Unrecognized action: \""
                                      << cRule->action->getPrimitiveType() << "\"\n";
                        }

                        // check if this action:
                        // 1) [implicit] can use the once modifier, and
                        // 2) has the once modifier enabled
                        if (cRule->action->onceModIsEnabled())
                            cRule->action->setActionCanRun(false);
                    }
                } else {
                    cRule->setConditionEvalResult(false); // states rule evaluated false
                    // check the condition type...
                    // if it is not a timer condition, then set the "action can run" flag to true
                    if (!Kodu::KoduConditionTimer::isSameTypeAs(cRule->condition)) {
                        cRule->action->setActionCanRun(true);
                    }
                }
                // invalidate object
                Kodu::ObjectKeeper::isValid = false;
            }
            cPage = NULL;
            cRule = NULL;
            postStateCompletion();
        }
    } // end of Kodu Interpreter
    
    //! Kodu Action Runner
    $nodeclass KoduActionRunner : StateNode : doStart {
        $reference KoduGame::agent;
        $reference KoduGame::scoreQueue;
        
        $reference KoduGame::motionActRef;
        $reference KoduGame::pageSwitchActRef;
        $reference KoduGame::playActRef;
        $reference KoduGame::sayActRef;
        $reference KoduGame::scoreActRef;
        
        if (agent.hasMotionCommand())
            motionActRef->start();

        if (agent.hasNewPageNumber())
            pageSwitchActRef->start();

        if (agent.hasSoundsToPlay())
            playActRef->start();
        
        if (agent.hasTextToSay())
            sayActRef->start();
            
        if (!scoreQueue.empty())
            scoreActRef->start();
    }

    $nodeclass TerminateGame : StateNode : doStart {
        $reference KoduGame::scoreQueue;
        $reference KoduGame::agent;
        
        $reference KoduGame::motionActRef;
        $reference KoduGame::pageSwitchActRef;
        $reference KoduGame::playActRef;
        $reference KoduGame::sayActRef;
        $reference KoduGame::scoreActRef;
        
        std::cout << "Clearing speech variable...\n";
        agent.stringToSpeak.clear();
        while (!agent.playQueue.empty())
            agent.playQueue.pop();

        while (!scoreQueue.empty())
            scoreQueue.pop();

        std::cout << "Deleting actuator instances...\n";
        if (motionActRef != NULL)
            delete motionActRef;
        if (pageSwitchActRef != NULL)
            delete pageSwitchActRef;
        if (playActRef != NULL)
            delete playActRef;
        if (sayActRef != NULL)
            delete sayActRef;
        if (scoreActRef != NULL)
            delete scoreActRef;

        std::cout << "Clearing pages...\n";
        GeneralFncs::destroyAllPtrsInVector(agent.pages);

        std::cout << "Terminating execution Kodu Game.\n";
    }

// ================================ Actuators ========================================= //

// Motion 

    $nodeclass MotionActuator : PilotNode : doStart {
        $reference KoduGame::agent;
        
        PilotRequest pReq(PilotTypes::noRequest);
        if (agent.currMotionCmd.targetObjectIsValid()) {
            pReq.requestType = PilotTypes::goToShape;
            pReq.targetShape = agent.currMotionCmd.getTargetObject();
            pReq.baseOffset = fmat::pack(250,0,0);
        } else {
            pReq.requestType = PilotTypes::walk;
            pReq.da = AngSignPi(agent.currMotionCmd.getTurningAngle());
            pReq.dx = agent.currMotionCmd.getDistanceToTravel();
        }
        pReq.forwardSpeed = agent.currMotionCmd.getForwardSpeed();
        pReq.turnSpeed = agent.currMotionCmd.getTurnSpeed();
        pReq.collisionAction = collisionIgnore;
        pilotreq = pReq;
        agent.currMotionCmd.invalidate();
        agent.startMonitoringWalk();
    }

    $nodeclass CompleteMotionActuator : StateNode : doStart {
        $reference KoduGame::agent;
        
        agent.stopMonitoringWalk();
        postStateCompletion();
    }

// end of Motion

// Page Switch 

    $nodeclass PageSwitchActuator : StateNode : doStart {
        $reference KoduGame::agent;

        int newPageIndex = agent.newReqdPage - 1;
        if (agent.pages[newPageIndex] == NULL) {
            std::cerr << "!!! A NULL page (index #" << newPageIndex << ") was requested.\n"
                      << "Ignoring action.\n";
            postStateFailure();
        } else {
            std::cout << "Switching to page " << agent.newReqdPage << " (index #" << newPageIndex << ")\n";
            Kodu::KoduPage* nextPage = agent.pages[newPageIndex];
            const int kRuleCount = nextPage->getRuleCount();
            for (int i = 0; i < kRuleCount; i++) {
                nextPage->getRuleInPos(i)->reinitializePrimitives();
            }
            agent.currPageIndex = newPageIndex;
            nextPage = NULL;
        }
        agent.newReqdPage = 0;
        std::cout << "Page switch actuator finished.\n";
        postStateCompletion();
    }

// end of Page Switch Actuator

// Play Actuator

    $nodeclass PlayActuator : StateNode : doStart {
        $reference KoduGame::agent;

        if (agent.hasSoundsToPlay()) {
            std::cout << "Play actuator finished.\n";
            postStateCompletion();
            return;
        }
        std::string wavfile = agent.playQueue.front();
        agent.playQueue.pop();
        postStateSignal<std::string>(wavfile);
    }
    
// end of Play Actuator

// Say Actuator

    $nodeclass SayActuator : StateNode : doStart {
        $reference KoduGame::agent;

        postStateSignal<std::string>(agent.stringToSpeak);
    }

    $nodeclass CompleteSayActuator : StateNode : doStart {
        $reference KoduGame::agent;

        agent.stringToSpeak.clear();
        std::cout << "Say actuator finished.\n";
        postStateCompletion();
    }

// end of Speech Actuator

// Score Actuator

    $nodeclass ScoreActuator : StateNode : doStart {
        $reference KoduGame::scoreQueue;
        while (!scoreQueue.empty()) {
            scoreQueue.front()->changeScore();
            scoreQueue.pop();
        }
        std::cout << "All score slots released.\n";
        postStateCompletion();
    }

// end of Score Actuator

// ==================================================================================== //
    
    virtual void setup() {
        $statemachine {
            startGame:  InitializeGame

            parser:     KoduParser
            interp:     KoduInterpreter
            runner:     KoduActionRunner

            endState:   StateNode
            endGame:    TerminateGame

            lookFwd:    PointHeadFwd
            
            startGame =C=> parser

            parser =C=> SnapImage =C=> { interp, lookFwd }
            parser =F=> endState
        
            interp =C=> runner
            interp =F=> endState

            runner =T(150)=> interp
            
            // motion actuator
            motionAct:  MotionActuator
            compMotionAct: CompleteMotionActuator

            motionAct =PILOT=> compMotionAct =C=> endState

            // speech actuator
            sayAct:     SayActuator
            compSayAct: CompleteSayActuator
            
            sayAct =S<std::string>=> SpeechNode =C=> compSayAct =C=> endState
            
            // sound actuator
            playAct:    PlayActuator
            
            playAct =S<std::string>=> SoundNode =T(50)=> playAct
            playAct =C=> endState
            
            // score actuator
            scoreAct:   ScoreActuator
            scoreAct =C=> endState

            // page switch actuator
            pageSwitchAct: PageSwitchActuator
            pageSwitchAct =C=> endState
            pageSwitchAct =F=> endGame
        }
    
        // actuator references
        sayActRef = sayAct;
        playActRef = playAct;
        scoreActRef = scoreAct;
        pageSwitchActRef = pageSwitchAct;
        motionActRef = motionAct;
    }
    
private:
    DISALLOW_COPY_ASSIGN(KoduGame);
}

REGISTER_BEHAVIOR(KoduGame);